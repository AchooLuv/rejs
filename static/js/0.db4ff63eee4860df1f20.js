webpackJsonp([0],{"eRe/":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",e._l(e.mcs,function(t){return n("div",{key:t.id,staticClass:"mcc-con"},[n("h2",{domProps:{innerHTML:e._s(t.tit)}}),e._v(" "),e._l(t.tables,function(t){return n("table",{key:t.id},[n("thead",[n("tr",e._l(t.thead,function(t){return n("th",{key:t.id,domProps:{innerHTML:e._s(t.th)}})}),0)]),e._v(" "),n("tbody",e._l(t.tbody,function(t){return n("tr",{key:t.id},e._l(t.tr,function(t){return n("td",{key:t.id,domProps:{innerHTML:e._s(t.td)}})}),0)}),0)])}),e._v(" "),t.labels?n("div",{staticClass:"divp"},e._l(t.labels,function(t){return n("p",{key:t.id,domProps:{innerHTML:e._s(t.con)}})}),0):e._e(),e._v(" "),e._l(t.codes,function(t){return n("div",{key:t.id,staticClass:"code"},[n("h3",{staticClass:"tit",domProps:{innerHTML:e._s(t.tit)}}),e._v(" "),n("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[e._v("          "),n("code",{staticClass:"javascript",domProps:{innerHTML:e._s(t.code)}}),e._v("\n        ")])])})],2)}),0)},staticRenderFns:[]};var o=n("VU/8")({name:"Other",data:function(){return{mcs:[{id:5,tit:"其他类型元字符：",tables:[{id:501,thead:[{id:50101,th:"元字符"},{id:50102,th:"中文名称"},{id:50103,th:"匹配对象"}],tbody:[{id:50104,tr:[{id:5010401,td:"-"},{id:5010402,td:"连接符"},{id:5010403,td:"用于连接字符串，可表示范围"}]},{id:50105,tr:[{id:5010501,td:"|"},{id:5010502,td:"多选分支符"},{id:5010503,td:"逻辑或，匹配任意一个子字符串或一个子表达式"}]}]}],labels:[{id:502,con:'<span style="color:red">注：</span>元字符<span style="color:red"> - </span>只有在字符组内部且不位于第一位时，正则引擎才会将其视作元字符，否则作为普通字符处理；'},{id:503,con:'元字符<span style="color:red"> | </span>只作用于紧邻的字符串或元素（一个元素即指一个字符组）。'}],codes:[{id:504,tit:'元字符<span style="color:red"> - </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;                 \n    \n    var text = 'AchooLuv',\n        regexp = /[a-z]{5}/i,   // 此处表示至少匹配字母a到字母z中的任意一个; 量词{5}限定匹配成功5次\n        result = text.match(regexp);\n    console.log(result[0]);   // 匹配结果为: Achoo\n\n    //被视为普通字符\n    var text1 = 'Luv-Achoo',\n        text2 = 'ABCA-C',\n        regexp1 = /[-a-z]{5}/i,   // 位于字符组内且位于开始处,被正则引擎视为普通字符处理\n        regexp2 = /a-c/i,   // 不位于字符组内,也将被正则引擎视为普通字符处理\n        result1 = text1.match(regexp1),\n        result2 = text2.match(regexp2);\n    console.log(result1);    // 匹配结果为: [\"Luv-A\", index: 0]  \n    console.log(result2);   // 匹配结果为: [\"A-C\", index: 3]"},{id:505,tit:'元字符<span style="color:red"> | </span>实例:',code:'    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;                 \n    \n    var text = \'Achoo Luv Achoo|Luv\',\n        regexp = /Achoo|Luv/i,    // 要么匹配Achoo ,要么匹配Luv\n        result = text.match(regexp);\n    console.log(result);    // 匹配结果为: ["Achoo", index: 0]\n\n    //被视为普通字符\n    var regexp1 = /[Achoo|Luv]{9}/i,    // 匹配Achoo|Luv\n        result1 = text.match(regexp1);\n    console.log(result1);    // 匹配结果为: ["Achoo|Luv", index: 10]'}]}]}}},r,!1,function(e){n("mQe0")},"data-v-f3404d14",null);t.default=o.exports},mQe0:function(e,t){}});
//# sourceMappingURL=0.db4ff63eee4860df1f20.js.map