{"version":3,"sources":["webpack:///src/pages/mp/engines/Engines.vue","webpack:///./src/pages/mp/engines/Engines.vue?88f9","webpack:///./src/pages/mp/engines/Engines.vue"],"names":["engines_Engines","render","this","$createElement","_self","_c","_m","staticRenderFns","_vm","_h","staticClass","_v","Component","__webpack_require__","normalizeComponent","name","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/12.e753e5d03a3987e552c8.js","sourcesContent":["<template>\r\n  <div class=\"mpc-con\">\r\n    <h2>正则引擎的介绍</h2>\r\n    <p>\r\n      <span class=\"ins\">正则引擎主要分为基本不同的两大类：一种是<span>DFA</span>引擎，可类比于电动汽车的电动发动机；另一种则是我们要详细讲解的<span>NFA</span>引擎，可类比于汽车的汽油发动机！两类引擎都有很长的历史，不过，正如汽油发动机一样，<span>NFA</span>引擎的历史更长一些，当今的绝大多数主流编程语言采用的也是<span>NFA</span>引擎，下表列举了一些主流的编程语言或工具采用的正则引擎：\r\n      </span>\r\n    </p>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>正则引擎类型</th>\r\n          <th>编程语言或工具</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>DFA</td>\r\n          <td>MySQL、flex、lex、egrep</td>\r\n        </tr>\r\n        <tr>\r\n          <td>POSIX NFA</td>\r\n          <td>mawk、GNU Emacs</td>\r\n        </tr>\r\n        <tr>\r\n          <td>传统型 NFA</td>\r\n          <td>Perl、Java、JavaScript、Python、C、C#、C++、PHP、Ruby、.Net</td>\r\n        </tr>\r\n        <tr>\r\n          <td>NFA/DFA混合</td>\r\n          <td>GNU awk、Tcl</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <p>\r\n      <span class=\"ins\">JavaScript采用的正则引擎是传统型NFA引擎，NFA引擎是基于表达式的匹配，这和基于文本的匹配的DFA引擎是完全不同的，NFA引擎与DFA引擎的区别有很多，让我对比来了解NFA引擎：</span>\r\n    </p>\r\n    <h3><span class=\"iconfont jh\">&#xe64a;</span>NFA与DFA在预编译期的区别：</h3>\r\n    <p><span class=\"ins\">在预编译期间，通常NFA的编译速度快于DFA，占用的内存也更少！</span></p>\r\n    <h3><span class=\"iconfont jh\">&#xe64a;</span>NFA与DFA在匹配速度上的区别：</h3>\r\n    <p><span class=\"ins\">在匹配速度上，由于NFA是基于表达式的匹配，在报告无法匹配之前，必须尝试正则表达式的所有变体，所以，通常NFA的匹配速度慢于DFA！</span></p>\r\n    <h3><span class=\"iconfont jh\">&#xe64a;</span>NFA与DFA在匹配结果上的区别：</h3>\r\n    <p><span class=\"ins\">在匹配结果上，DFA或者POSIX NFA会返回最左边的最长的匹配文本，匹配结果是确定的，而传统型NFA则不一定返回这样的文本，也可能是其它文本，所以传统型NFA的匹配结果是不确定的！</span></p>\r\n    <h3><span class=\"iconfont jh\">&#xe64a;</span>NFA与DFA在能力上的区别：</h3>\r\n    <p><span class=\"ins\">NFA提供了一些DFA不支持的功能：捕获分组、环视及其它复杂的零长度确认、忽略优先量词及有序的多选分支结构（POSIX NFA也不支持此功能）、占有优先量词、固化分组！</span></p>\r\n    <p>总结以上区别，在不考虑混用NFA/DFA的情况下，很容易发现：若引擎支持<span class=\"ins\">忽略优先量词(非贪婪模式)</span>，则该引擎一定是传统型NFA引擎；若引擎不支持<span class=\"ins\">忽略优先量词(非贪婪模式)</span>，但是支持<span class=\"ins\">捕获分组和回溯</span>，则该引擎一定是POSIX NFA引擎;若引擎以上三个功能都不支持，则一定是DFA引擎！</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Engines'\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import 'sa/styles/var.scss';\r\n.mpc-con {\r\n  @include tip;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/pages/mp/engines/Engines.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"mpc-con\"},[_c('h2',[_vm._v(\"正则引擎的介绍\")]),_vm._v(\" \"),_c('p',[_c('span',{staticClass:\"ins\"},[_vm._v(\"正则引擎主要分为基本不同的两大类：一种是\"),_c('span',[_vm._v(\"DFA\")]),_vm._v(\"引擎，可类比于电动汽车的电动发动机；另一种则是我们要详细讲解的\"),_c('span',[_vm._v(\"NFA\")]),_vm._v(\"引擎，可类比于汽车的汽油发动机！两类引擎都有很长的历史，不过，正如汽油发动机一样，\"),_c('span',[_vm._v(\"NFA\")]),_vm._v(\"引擎的历史更长一些，当今的绝大多数主流编程语言采用的也是\"),_c('span',[_vm._v(\"NFA\")]),_vm._v(\"引擎，下表列举了一些主流的编程语言或工具采用的正则引擎：\\n    \")])]),_vm._v(\" \"),_c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"正则引擎类型\")]),_vm._v(\" \"),_c('th',[_vm._v(\"编程语言或工具\")])])]),_vm._v(\" \"),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"DFA\")]),_vm._v(\" \"),_c('td',[_vm._v(\"MySQL、flex、lex、egrep\")])]),_vm._v(\" \"),_c('tr',[_c('td',[_vm._v(\"POSIX NFA\")]),_vm._v(\" \"),_c('td',[_vm._v(\"mawk、GNU Emacs\")])]),_vm._v(\" \"),_c('tr',[_c('td',[_vm._v(\"传统型 NFA\")]),_vm._v(\" \"),_c('td',[_vm._v(\"Perl、Java、JavaScript、Python、C、C#、C++、PHP、Ruby、.Net\")])]),_vm._v(\" \"),_c('tr',[_c('td',[_vm._v(\"NFA/DFA混合\")]),_vm._v(\" \"),_c('td',[_vm._v(\"GNU awk、Tcl\")])])])]),_vm._v(\" \"),_c('p',[_c('span',{staticClass:\"ins\"},[_vm._v(\"JavaScript采用的正则引擎是传统型NFA引擎，NFA引擎是基于表达式的匹配，这和基于文本的匹配的DFA引擎是完全不同的，NFA引擎与DFA引擎的区别有很多，让我对比来了解NFA引擎：\")])]),_vm._v(\" \"),_c('h3',[_c('span',{staticClass:\"iconfont jh\"},[_vm._v(\"\")]),_vm._v(\"NFA与DFA在预编译期的区别：\")]),_vm._v(\" \"),_c('p',[_c('span',{staticClass:\"ins\"},[_vm._v(\"在预编译期间，通常NFA的编译速度快于DFA，占用的内存也更少！\")])]),_vm._v(\" \"),_c('h3',[_c('span',{staticClass:\"iconfont jh\"},[_vm._v(\"\")]),_vm._v(\"NFA与DFA在匹配速度上的区别：\")]),_vm._v(\" \"),_c('p',[_c('span',{staticClass:\"ins\"},[_vm._v(\"在匹配速度上，由于NFA是基于表达式的匹配，在报告无法匹配之前，必须尝试正则表达式的所有变体，所以，通常NFA的匹配速度慢于DFA！\")])]),_vm._v(\" \"),_c('h3',[_c('span',{staticClass:\"iconfont jh\"},[_vm._v(\"\")]),_vm._v(\"NFA与DFA在匹配结果上的区别：\")]),_vm._v(\" \"),_c('p',[_c('span',{staticClass:\"ins\"},[_vm._v(\"在匹配结果上，DFA或者POSIX NFA会返回最左边的最长的匹配文本，匹配结果是确定的，而传统型NFA则不一定返回这样的文本，也可能是其它文本，所以传统型NFA的匹配结果是不确定的！\")])]),_vm._v(\" \"),_c('h3',[_c('span',{staticClass:\"iconfont jh\"},[_vm._v(\"\")]),_vm._v(\"NFA与DFA在能力上的区别：\")]),_vm._v(\" \"),_c('p',[_c('span',{staticClass:\"ins\"},[_vm._v(\"NFA提供了一些DFA不支持的功能：捕获分组、环视及其它复杂的零长度确认、忽略优先量词及有序的多选分支结构（POSIX NFA也不支持此功能）、占有优先量词、固化分组！\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"总结以上区别，在不考虑混用NFA/DFA的情况下，很容易发现：若引擎支持\"),_c('span',{staticClass:\"ins\"},[_vm._v(\"忽略优先量词(非贪婪模式)\")]),_vm._v(\"，则该引擎一定是传统型NFA引擎；若引擎不支持\"),_c('span',{staticClass:\"ins\"},[_vm._v(\"忽略优先量词(非贪婪模式)\")]),_vm._v(\"，但是支持\"),_c('span',{staticClass:\"ins\"},[_vm._v(\"捕获分组和回溯\")]),_vm._v(\"，则该引擎一定是POSIX NFA引擎;若引擎以上三个功能都不支持，则一定是DFA引擎！\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-14088261\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/pages/mp/engines/Engines.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-14088261\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Engines.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Engines.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Engines.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-14088261\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Engines.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-14088261\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/mp/engines/Engines.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}