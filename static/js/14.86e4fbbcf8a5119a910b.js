webpackJsonp([14],{"0gxf":function(e,o){},"U/hw":function(e,o,t){"use strict";Object.defineProperty(o,"__esModule",{value:!0});var n={render:function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("div",e._l(e.mcs,function(o){return t("div",{key:o.id,staticClass:"mcc-con"},[t("h2",{domProps:{innerHTML:e._s(o.tit)}}),e._v(" "),e._l(o.tables,function(o){return t("table",{key:o.id},[t("thead",[t("tr",e._l(o.thead,function(o){return t("th",{key:o.id,domProps:{innerHTML:e._s(o.th)}})}),0)]),e._v(" "),t("tbody",e._l(o.tbody,function(o){return t("tr",{key:o.id},e._l(o.tr,function(o){return t("td",{key:o.id,domProps:{innerHTML:e._s(o.td)}})}),0)}),0)])}),e._v(" "),o.labels?t("div",{staticClass:"divp"},e._l(o.labels,function(o){return t("p",{key:o.id,domProps:{innerHTML:e._s(o.con)}})}),0):e._e(),e._v(" "),e._l(o.codes,function(o){return t("div",{key:o.id,staticClass:"code"},[t("h3",{staticClass:"tit",domProps:{innerHTML:e._s(o.tit)}}),e._v(" "),t("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[e._v("          "),t("code",{staticClass:"javascript",domProps:{innerHTML:e._s(o.code)}}),e._v("\n        ")])])})],2)}),0)},staticRenderFns:[]};var r=t("VU/8")({name:"Location",data:function(){return{mcs:[{id:2,tit:"匹配位置型元字符：",tables:[{id:201,thead:[{id:20101,th:"元字符"},{id:20102,th:"中文名称"},{id:20103,th:"匹配对象"}],tbody:[{id:20104,tr:[{id:2010401,td:"^"},{id:2010402,td:"脱字符"},{id:2010403,td:"匹配一行起始位置"}]},{id:20105,tr:[{id:2010501,td:"$"},{id:2010502,td:"美元符"},{id:2010503,td:"匹配一行结束位置"}]},{id:20106,tr:[{id:2010601,td:"\\b"},{id:2010602,td:"单词边界符"},{id:2010603,td:"匹配单词边界，即单词与空格之间的位置"}]},{id:20107,tr:[{id:2010701,td:"\\B"},{id:2010702,td:"非单词边界符"},{id:2010703,td:"匹配非单词的边界，即单词与单词之间的某位置"}]},{id:20108,tr:[{id:2010801,td:"(?= char)"},{id:2010802,td:"肯定正序环视"},{id:2010803,td:"自左向右查找文本,匹配一个位置,该位置的右侧满足子表达式(即 char)"}]},{id:20109,tr:[{id:2010901,td:"(?&lt;= char)"},{id:2010902,td:"肯定逆序环视"},{id:2010903,td:"自右向左查找文本,匹配一个位置,该位置的左侧满足子表达式(即 char)"}]},{id:201091,tr:[{id:20109101,td:"(?! char)"},{id:20109102,td:"否定正序环视"},{id:20109103,td:"自左向右查找文本,匹配一个位置,该位置的右侧不满足子表达式(即 char)"}]},{id:201092,tr:[{id:20109201,td:"(?&lt;! char)"},{id:20109202,td:"否定逆序环视"},{id:20109203,td:"自右向左查找文本,匹配一个位置,该位置的左侧不满足子表达式(即 char)"}]}]}],labels:[{id:202,con:'<span style="color:red">注：</span>通常匹配位置型元字符只作为某一表达式的一部分(即子表达式)来使用，以提高匹配精度；'},{id:203,con:'元字符<span style="color:red"> ^ </span>在字符组内部时将被正则引擎视为逻辑非，即取反；'},{id:204,con:'元字符<span style="color:red"> \\b </span>在字符组内部是表示匹配一个退格(U+0008)；'},{id:205,con:"环视结构均不会'占用'文本,只匹配一个位置。"}],codes:[{id:20601,tit:'元字符<span style="color:red"> ^ </span>实例:',code:'     //本实例使用的JS正则语法声明 var regexp = /pattern/flags;\n\n    //假设现在的需求为:只想匹配 行开始处的AchooLuv,不匹配achooluv和行尾的AchooLuv\n    var text = \'AchooLuv and achooluv and AchooLuv\',   // 注意大小写\n        regexp1 = /AchooLuv/g,   // 标识符g表示进行全局匹配\n        result1 = text.match(regexp1);\n    console.log(result1);   // 匹配结果为: ["AchooLuv", "Achooluv"] 很明显这是把结尾处的AchooLuv也成功匹配了,非我们想要的结果\n\n    //稍稍改造,使用元字符 ^ 让结果更准确\n    var regexp2 = /^AchooLuv/g,\n        result2 = regexp2.exec(text);   // 该方法的返回值不懂可查看上方的.exec()方法链接\n    console.log(result2);    // 匹配结果为: ["AchooLuv",index:0] 由index:0可知该结果为期望的匹配结果\n    \n    //即便进行忽略字母大小写的模糊匹配,结果满足需求\n    var regexp3 = /^achooluv/ig,\n        result3 = regexp3.exec(text);\n    console.log(result3);    // 匹配结果为: ["AchooLuv",index:0] 和上面的结果一样,符合需求'},{id:20602,tit:'元字符<span style="color:red"> $ </span>实例:',code:'    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;\n\n    //假设现在的需求为:只想匹配 行尾处的AchooLuv,不匹配achooluv和行首的AchooLuv\n    var text = \'AchooLuv and achooluv and AchooLuv\',    // 注意大小写\n        regexp1 = /AchooLuv/g,\n        result1 = text.match(regexp1);\n    console.log(result1);   // 匹配结果为: ["AchooLuv", "Achooluv"] 很明显这是把行首处的AchooLuv也成功匹配了,非我们想要的结果\n\n    //稍稍改造,使用元字符 $ 让结果更准确\n    var regexp2 = /AchooLuv$/g,\n        result2 = regexp2.exec(text);\n    console.log(result2);    // 匹配结果为: ["AchooLuv",index:26] 由index:0可知该结果为期望的匹配结果\n    \n    //任然进行忽略字母大小写的模糊匹配,结果也满足需求\n    var regexp3 = /achooluv$/ig,\n        result3 = regexp3.exec(text);\n    console.log(result3);    // 匹配结果为: ["AchooLuv",index:26] 和上面的结果一样,符合需求'},{id:20603,tit:'元字符<span style="color:red"> \\b </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;\n\n    var regexp1 = /\\bachoo\\b/i,   // 匹配内容为一个完整单词 Achoo或achoo\n        result1 = regexp1.test('Design by AchooLuv'),\n        result2 = regexp1.test('Design by Achoo');    // 匹配成功\n    console.log(result1);    // 匹配失败,返回: false\n    console.log(result2);    // 匹配成功,返回: true"},{id:20604,tit:'元字符<span style="color:red"> \\B </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;\n\n    var regexp1 = /\\bachoo\\B/i,    // 匹配内容为单词AchooLuv中的一部分 Achoo或achoo ,且第二个o字母的右侧为 非单词边界\n        result1 = regexp1.test('Design by AchooLuv'),   // 匹配成功\n        result2 = regexp1.test('Design by Achoo');\n    console.log(result1);    // 匹配成功,返回: true\n    console.log(result2);    // 匹配失败,返回: false"},{id:20605,tit:'元字符<span style="color:red"> (?=  ) </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;\n\n    var text = 'Design by AchooLuv ',\n        regexp = /(?=\\Bluv\\b)/i,    // 匹配内容为: 单词AchooLuv中第二个o字母与字母l之间这一位置\n        result = text.replace(regexp,'-');    // 在匹配成功的位置添加符号 -\n    console.log(result);    // 返回结果: Design by Achoo-Luv "},{id:20606,tit:'元字符<span style="color:red"> (?&lt;=  ) </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;\n        \n    var text = 'Design by AchooLuv ',\n        regexp = /(?<=\\bachoo\\B)/i,    // 匹配内容为: 单词AchooLuv中第二个o字母与字母l之间这一位置\n        result = text.replace(regexp,'-');    // 在匹配成功的位置添加符号 -\n    console.log(result);   // 返回结果: Design by Achoo-Luv \n\n    //同时使用肯定正序环视和肯定逆序环视来匹配同一位置\n    var regexp1 = /(?<=\\bachoo\\B)(?=\\Bluv\\b)/i,\n        result1 = text.replace(regexp1,'-_-');     // 在匹配成功的位置添加符号 -_-\n    console.log(result1);    // 返回结果: Design by Achoo-_-Luv "},{id:20607,tit:'元字符<span style="color:red"> (?!  ) </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;\n\n    //肯定逆序环视的作用是将匹配对象限制在 AchooLuv Achoo7orz \n    var text = 'Design by AchooLuv and Achoo7orz ',\n        regexp = /(?<=\\bachoo\\B)(?!\\Bluv\\b)/i,    // 否定正序环视匹配AchooLuv和Achoo7orz中Achoo后紧接着不是Luv的Achoo7orz\n        result = text.replace(regexp,'-');    // 在匹配成功的位置添加符号 -\n    console.log(result);    // 返回结果: Design by AchooLuv and Achoo-7orz "},{id:20608,tit:'元字符<span style="color:red"> (?&lt;!  ) </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;\n\n    //肯定正序环视的作用是将匹配对象限制在 AchooLuv 7orzLuv \n    var text = 'Design by AchooLuv and 7orzLuv ',\n        regexp = /(?&lt;!\\bachoo\\B)(?=\\BLuv\\b)/i,  // 否定逆序环视匹配AchooLuv和7orzLuv中Luv前不是Achoo的7orzLuv\n        result = text.replace(regexp,'-');  // 在匹配成功的位置添加符号 -\n    console.log(result);    // 返回结果: Design by AchooLuv and 7orz-Luv "}]}]}}},n,!1,function(e){t("0gxf")},"data-v-08b5f02f",null);o.default=r.exports}});
//# sourceMappingURL=14.86e4fbbcf8a5119a910b.js.map