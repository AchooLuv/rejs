webpackJsonp([2],{"Juw/":function(e,n){},UdCf:function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t={render:function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",e._l(e.mcs,function(n){return o("div",{key:n.id,staticClass:"mcc-con"},[o("h2",{domProps:{innerHTML:e._s(n.tit)}}),e._v(" "),e._l(n.tables,function(n){return o("table",{key:n.id},[o("thead",[o("tr",e._l(n.thead,function(n){return o("th",{key:n.id,domProps:{innerHTML:e._s(n.th)}})}),0)]),e._v(" "),o("tbody",e._l(n.tbody,function(n){return o("tr",{key:n.id},e._l(n.tr,function(n){return o("td",{key:n.id,domProps:{innerHTML:e._s(n.td)}})}),0)}),0)])}),e._v(" "),n.labels?o("div",{staticClass:"divp"},e._l(n.labels,function(n){return o("p",{key:n.id,domProps:{innerHTML:e._s(n.con)}})}),0):e._e(),e._v(" "),e._l(n.codes,function(n){return o("div",{key:n.id,staticClass:"code"},[o("h3",{staticClass:"tit",domProps:{innerHTML:e._s(n.tit)}}),e._v(" "),o("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[e._v("          "),o("code",{staticClass:"javascript",domProps:{innerHTML:e._s(n.code)}}),e._v("\n        ")])])})],2)}),0)},staticRenderFns:[]};var r=o("VU/8")({name:"Counter",data:function(){return{mcs:[{id:1,tit:"计数功能型元字符：",tables:[{id:101,thead:[{id:10101,th:"元字符"},{id:10102,th:"中文名称"},{id:10103,th:"匹配对象"}],tbody:[{id:10202,tr:[{id:1020201,td:"*"},{id:1020202,td:"星号"},{id:1020203,td:"匹配任意多次,等价于{0,}"}]},{id:10203,tr:[{id:1020301,td:"+"},{id:1020302,td:"加号"},{id:1020303,td:"至少匹配一次，等价于{1,}"}]},{id:10204,tr:[{id:1020401,td:"?"},{id:1020402,td:"问号"},{id:1020403,td:"匹配零次或一次，等价于{0,1}"}]},{id:10205,tr:[{id:1020501,td:"{min,max}"},{id:1020502,td:"区间量词"},{id:1020503,td:"至少匹配min次，至多匹配max次"}]}]}],labels:[{id:102,con:'<span style="color:red">注：</span>所有计数型元字符均只作用于之前紧邻的元素；'},{id:103,con:'元字符<span style="color:red"> * </span>、元字符<span style="color:red"> ? </span>、元字符<span style="color:red"> + </span>、包括元字符<span style="color:red"> . </span>、元字符<span style="color:red"> | </span>，在字符组内部时将被正则引擎作为普通字符处理。'}],codes:[{id:10401,tit:'元字符<span style="color:red"> * </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;\n\n    var regexp1 = /acho*/i,   // *只作用于之前紧邻的字母o ,匹配表达式完全等价于 /achoo{0,}/i\n        result1 = regexp1.exec('AchooLuv');\n    console.log(result1[0]);    // 匹配结果为: Achoo\n\n    //取消贪婪模式 - - - 在计数元字符后添加 ?\n    var regexp2 = /acho*?/i,   // 匹配表达式完全等价于 /achoo{0,}?/i\n        result2 = regexp2.exec('AchooLuv');\n    console.log(result2[0]);    // 匹配结果为: Ach\n\n    //在字符组内部 - - - 被正则引擎视为普通字符\n    var regexp3 = /[*]/,    // 被视为普通字符 *\n        result3 = regexp3.test('AchooLuv');    // 匹配失败\n    console.log(result3);    // 匹配结果为: false"},{id:10402,tit:'元字符<span style="color:red"> + </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = new RegExp('pattern','flags');\n\n    var regexp1 = new RegExp('acho+','i'),   // +只作用于之前紧邻的字母o ,匹配表达式完全等价于 new RegExp('acho{1,}','i')\n        result1 = regexp1.exec('AchooLuv');\n    console.log(result1[0]);    // 匹配结果为: Achoo\n\n    //取消贪婪模式 - - - 在计数元字符后添加 ?\n    var regexp2 = new RegExp('acho+','i'),   // 匹配表达式完全等价于 new RegExp('acho{1,}','i')\n        result2 = regexp2.exec('AchooLuv');\n    console.log(result2[0]);    // 匹配结果为: Acho\n\n    //在字符组内部 - - - 被正则引擎视为普通字符\n    var regexp3 = new RegExp('[+]','i'),   // 被视为普通字符+ ,匹配失败\n        result3 = regexp3.test('AchooLuv');\n    console.log(result3);    // 匹配结果为: false"},{id:10403,tit:'元字符<span style="color:red"> ? </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;\n\n    var regexp1 = /acho?/i,   // *只作用于之前紧邻的字母o ,匹配表达式完全等价于 /achoo{0,1}/i\n        result1 = regexp1.exec('AchooLuv');\n    console.log(result1[0]);    // 匹配结果为: Acho\n\n    //取消贪婪模式 - - - 在计数元字符后添加 ?\n    var regexp2 = /acho??/i,    // 匹配表达式完全等价于 /achoo{0,1}?/i\n        result2 = regexp2.exec('AchooLuv');\n    console.log(result2[0]);    // 匹配结果为: Ach\n\n    //在字符组内部 - - - 被正则引擎视为普通字符\n    var regexp3 = /[?]/i,     // 被视为普通字符? ,匹配失败\n        result3 = regexp3.test('AchooLuv');\n    console.log(result3);    // 匹配结果为: false"},{id:10404,tit:'元字符<span style="color:red"> {min,max} </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = new RegExp('pattern','flags');\n\n    var regexp1 = new RegExp('acho{2,4}','i'),   // {min,max}只作用于之前紧邻的字母o\n        result1 = regexp1.exec('AchoOoOo');\n    console.log(result1[0]);    // 匹配结果为: AchoOoO\n\n    //取消贪婪模式 - - - 在计数元字符后添加 ?\n    var regexp2 = new RegExp('acho{2,4}?','i'), \n        result2 = regexp2.exec('AchoOoOo');\n    console.log(result2[0]);    // 匹配结果为: AchoO"}]}]}}},t,!1,function(e){o("Juw/")},"data-v-ae9fbcae",null);n.default=r.exports}});
//# sourceMappingURL=2.89c0fd5b00f68586b9b0.js.map