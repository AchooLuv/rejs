webpackJsonp([4],{Etbv:function(e,t){},Yv3h:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",e._l(e.mcs,function(t){return n("div",{key:t.id,staticClass:"mcc-con"},[n("h2",{domProps:{innerHTML:e._s(t.tit)}}),e._v(" "),e._l(t.tables,function(t){return n("table",{key:t.id},[n("thead",[n("tr",e._l(t.thead,function(t){return n("th",{key:t.id,domProps:{innerHTML:e._s(t.th)}})}),0)]),e._v(" "),n("tbody",e._l(t.tbody,function(t){return n("tr",{key:t.id},e._l(t.tr,function(t){return n("td",{key:t.id,domProps:{innerHTML:e._s(t.td)}})}),0)}),0)])}),e._v(" "),t.labels?n("div",{staticClass:"divp"},e._l(t.labels,function(t){return n("p",{key:t.id,domProps:{innerHTML:e._s(t.con)}})}),0):e._e(),e._v(" "),e._l(t.codes,function(t){return n("div",{key:t.id,staticClass:"code"},[n("h3",{staticClass:"tit",domProps:{innerHTML:e._s(t.tit)}}),e._v(" "),n("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[e._v("          "),n("code",{staticClass:"javascript",domProps:{innerHTML:e._s(t.code)}}),e._v("\n        ")])])})],2)}),0)},staticRenderFns:[]};var r=n("VU/8")({name:"Location",data:function(){return{mcs:[{id:3,tit:"匹配单个字符型元字符：",tables:[{id:301,thead:[{id:30101,th:"元字符"},{id:30102,th:"中文名称"},{id:30103,th:"匹配对象"}],tbody:[{id:303,tr:[{id:30301,td:"."},{id:30302,td:"点号"},{id:30303,td:"匹配(除换行符之外)单个任意字符"}]},{id:304,tr:[{id:304301,td:"[ ]"},{id:304302,td:"字符组"},{id:304303,td:"匹配单个列出的字符"}]},{id:305,tr:[{id:30501,td:"[^ ]"},{id:30502,td:"排除型字符组"},{id:30503,td:"匹配单个未列出的字符"}]}]}],labels:[],codes:[{id:306,tit:'元字符<span style="color:red"> . </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;                 \n    \n    var regexp = /./,\n        result = regexp .exec('AchooLuv');\n    console.log(result[0]);   // 匹配结果为: A\n\n    //再看一个例子\n    var regexp1 = /.{3}Luv/,\n        result1 = regexp1.exec('AchooLuv');\n    console.log(result1[0]);    // 匹配结果为: hooLuv\n    \n    //在字符组内部 - - - 被正则引擎视为普通字符\n    var regexp2 = /[.]/,   // 被视为普通字符 .\n        result2 = regexp2.test('AchooLuv');   // 匹配失败\n    console.log(result2);    // 匹配结果为: false"},{id:307,tit:'元字符<span style="color:red"> [  ] </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;                 \n    \n    var regexp = /[Lo]/i,    // 只要其中任意一个字符匹配成功,便终止匹配\n        result = regexp .exec('AchooLuv');\n    console.log(result[0]);   // 匹配结果为: o\n\n    //再看一个例子,这个结果是不是出乎意料(你猜测的结果是不是: oL)  ?\n    var regexp1 = /[Lo]{2}/i,\n        result1 = regexp1.exec('AchooLuv');\n    console.log(result1[0]);    // 然而匹配结果为: oo\n\n    //再-再看一个例子,这个结果符合你的预期吗 ?\n    var regexp2 = /[Lo]{3}/i,\n        result2 = regexp2.exec('AchooLuv');\n    console.log(result2[0]);    // 匹配结果为: ooL  至于为什么会是这些匹配结果,将会在匹配原理中详细介绍!"},{id:308,tit:'元字符<span style="color:red"> [^  ] </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;                 \n    \n    var regexp = /[^achoo]/i,   // 在文本中匹配字符组内未列出的第一个字符\n        result = regexp .exec('AchooLuv');\n    console.log(result[0]);   // 匹配结果为: L\n\n    //看看这个例子,你预期的结果是不是 AL ?\n    var regexp1 = /[^choo]{2}/i,\n        result1 = regexp1 .exec('AchooLuv');\n    console.log(result1[0]);    // 匹配结果为: Lu\n\n    //再看这个例子,你预期的结果什么呢 ?\n    var regexp2 = /[^hoo]{2}/i,\n        result2 = regexp2 .exec('AchooLuv');\n    console.log(result2[0]);    // 匹配结果为: Ac\n    \n    //再看这个例子,你预期的结果又是什么呢 ?\n    var regexp3 = /[^hoo]{3}/i,\n        result3 = regexp3 .exec('AchooLuv');\n    console.log(result3[0]);    // 匹配结果为: Luv\n\n    //再看这个例子,你预期的结果又是什么呢 ?\n    var regexp4 = /[^hoo]{4}/i,\n        result4 = regexp4 .test('AchooLuv');\n    console.log(result4);   // 匹配失败,返回: false  至于为什么会是这些匹配结果,将会在匹配原理中详细介绍!"}]}]}}},o,!1,function(e){n("Etbv")},"data-v-6bc7672f",null);t.default=r.exports}});
//# sourceMappingURL=4.b3d2a5a21ac6d52aa0eb.js.map