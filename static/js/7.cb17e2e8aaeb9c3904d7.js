webpackJsonp([7],{"137h":function(e,o){},cYsG:function(e,o,t){"use strict";Object.defineProperty(o,"__esModule",{value:!0});var n={render:function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("div",e._l(e.mcs,function(o){return t("div",{key:o.id,staticClass:"mcc-con"},[t("h2",{domProps:{innerHTML:e._s(o.tit)}}),e._v(" "),e._l(o.tables,function(o){return t("table",{key:o.id},[t("thead",[t("tr",e._l(o.thead,function(o){return t("th",{key:o.id,domProps:{innerHTML:e._s(o.th)}})}),0)]),e._v(" "),t("tbody",e._l(o.tbody,function(o){return t("tr",{key:o.id},e._l(o.tr,function(o){return t("td",{key:o.id,domProps:{innerHTML:e._s(o.td)}})}),0)}),0)])}),e._v(" "),o.labels?t("div",{staticClass:"divp"},e._l(o.labels,function(o){return t("p",{key:o.id,domProps:{innerHTML:e._s(o.con)}})}),0):e._e(),e._v(" "),e._l(o.codes,function(o){return t("div",{key:o.id,staticClass:"code"},[t("h3",{staticClass:"tit",domProps:{innerHTML:e._s(o.tit)}}),e._v(" "),t("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[e._v("          "),t("code",{staticClass:"javascript",domProps:{innerHTML:e._s(o.code)}}),e._v("\n        ")])])})],2)}),0)},staticRenderFns:[]};var r=t("VU/8")({name:"Advance",data:function(){return{mcs:[{id:4,tit:"进阶型元字符：",tables:[{id:401,thead:[{id:40101,th:"元字符"},{id:40102,th:"中文名称"},{id:40103,th:"匹配对象"}],tbody:[{id:40102,tr:[{id:4010201,td:"(char)"},{id:4010202,td:"捕获型括号"},{id:4010203,td:"限定多选结构、分组、捕获结果"}]},{id:40103,tr:[{id:4010301,td:"(?:char)"},{id:4010302,td:"非捕获型括号"},{id:4010303,td:"匹配char，但不捕获该结果"}]},{id:40104,tr:[{id:4010401,td:"(?>char)"},{id:4010402,td:"固化分组（暂不支持）"},{id:4010403,td:"匹配char，且不“交还”还分组里的任何字符"}]},{id:40105,tr:[{id:4010501,td:"(?&lt;name>)"},{id:4010502,td:"命名捕获"},{id:4010503,td:"命名捕获分组内容，并通过name调用捕获内容"}]}]}],labels:[{id:402,con:'<span style="color:red">注：</span><span style="color:red">char </span>为要匹配的字符串或表达式；'},{id:403,con:'<span style="color:red">name </span>为合法的JavaScript标识符，描述了捕获的内容；'}],codes:[{id:40401,tit:'元字符<span style="color:red">  ( ) </span>实例:',code:'    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;                 \n    \n    //值得注意的是多层捕获括号嵌套时的捕获顺序\n    //1、若左侧的捕获括号内无嵌套捕获括号,则按表达式中出现的顺序 - 从左到右依次捕获;\n    //2、若左侧的捕获括号内有嵌套捕获括号,则先在该处按 - 从外到内的顺序依次捕获,再按表达式中出现的顺序 - 从左到右依次捕获;\n    //3、若在从左到右的捕获中出现了上面2中的情况,依然按照2中的方法处理; 出现1中的情况,则按1中的方法处理。\n    var text = \'Design by AchooLuvAchooLuvAchoo\',\n        regexp = /(ac(hoo))(luv)/i,   // $1捕获Achoo ,$2捕获hoo ,$3捕获Luv\n        result = text.match(regexp);\n    console.log(result);    // 匹配结果为: ["AchooLuv", "Achoo", "hoo", "Luv", index: 10]\n\n    //表达式内的反向引用,格式: \\n (n表数字)\n    var regexp1 = /(achoo)(luv)\\1/i,    // \\1引用表达式中的(luv),即$2捕获内容\n        result1 = text.match(regexp1);\n    console.log(result1);     // 匹配结果为:  ["AchooLuvAchoo", "Achoo", "Luv", index: 10]\n    //反向引用被捕获后任可被引用\n    var regexp2 = /(achoo)(luv)(\\1)(\\2)\\3/i,    // \\1引用表达式中的(achoo),\\3引用表达式中的(\\1)\n        result2 = text.match(regexp2);\n    console.log(result2);   // 匹配结果为:  ["AchooLuvAchooLuvAchoo", "Achoo", "Luv", "Achoo", "Luv", index: 10]\n\n    //通过$1 ~$9直接引用捕获内容\n    var text1 = \'Design by AchooLuv\',\n        regexp3 = /(achoo)(luv)/i,\n        result3 = text1.replace(regexp3,\'$2$1\');    // 交换单词AchooLuv中的 Achoo和Luv 的顺序\n    console.log(result3);   // 输出结果为: Design by LuvAchoo\n    //在JS中可以通过RegExp.$1 ~ RegExp.$9取得正则捕获内容的引用\n    console.log(RegExp.$1);    // 输出结果为: Achoo\n    console.log(RegExp.$2);    // 输出结果为: Luv'},{id:40403,tit:'元字符<span style="color:red">  (?: ) </span>实例:',code:'    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;                 \n    \n    var text = \'Design by AchooLuv\',\n        regexp = /\\b(?:achoo)(luv)\\b/i,    // Achoo不被捕获 , 只捕获Luv且通过$1引用该内容\n        result = text.match(regexp);\n    console.log(result);   // 匹配结果为: ["AchooLuv", "Luv"]\n    console.log(RegExp.$1);    // 输出结果为: Luv'},{id:40404,tit:'元字符<span style="color:red">  (?&lt;name&gt;) </span>实例:',code:"    //本实例使用的JS正则语法声明 var regexp = /pattern/flags;  \n                   \n    //命名捕获是ES9才正式支持的正则新特性\n    const XJ = /(?&lt;year&gt;[0-9]{4})-(?&lt;month&gt;[0-9]{2})-(?&lt;day&gt;[0-9]{2})/;\n    //使用ES6解构语法更为简便\n    const {groups: {year,day,month}} = XJ.exec('1995-05-26');\n    console.log(year);    // 1995\n    console.log(month);   // 05\n    console.log(day);   // 26"}]}]}}},n,!1,function(e){t("137h")},"data-v-5fd4a787",null);o.default=r.exports}});
//# sourceMappingURL=7.cb17e2e8aaeb9c3904d7.js.map